$date
	Tue Oct 27 20:20:49 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 32 ! out [31:0] $end
$var reg 1 " clk $end
$var reg 1 # done $end
$var reg 1 $ reset $end
$scope module pam $end
$var wire 1 " clk $end
$var wire 1 $ reset $end
$var wire 32 % out [31:0] $end
$var wire 30 & next_index [31:2] $end
$var wire 32 ' next_data [31:0] $end
$var wire 30 ( index [31:2] $end
$var wire 32 ) data_2 [31:0] $end
$var wire 32 * data [31:0] $end
$scope module Adder $end
$var wire 30 + in2 [29:0] $end
$var wire 30 , out [29:0] $end
$var wire 30 - in1 [29:0] $end
$upscope $end
$scope module Counter $end
$var wire 1 " clk $end
$var wire 30 . d [29:0] $end
$var wire 1 / enable $end
$var wire 1 $ reset $end
$var reg 30 0 q [29:0] $end
$upscope $end
$scope module PipelinedReg $end
$var wire 1 " clk $end
$var wire 1 1 enable $end
$var wire 1 $ reset $end
$var wire 32 2 d [31:0] $end
$var reg 32 3 q [31:0] $end
$upscope $end
$scope module Register $end
$var wire 1 " clk $end
$var wire 1 4 enable $end
$var wire 1 $ reset $end
$var wire 32 5 d [31:0] $end
$var reg 32 6 q [31:0] $end
$upscope $end
$scope module alu $end
$var wire 3 7 control [2:0] $end
$var wire 32 8 inA [31:0] $end
$var wire 32 9 inB [31:0] $end
$var wire 32 : out [31:0] $end
$var wire 1 ; zero $end
$upscope $end
$scope module rom $end
$var wire 30 < addr [29:0] $end
$var wire 32 = data [31:0] $end
$var reg 32 > i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000 >
bx =
bx <
x;
bx :
bx 9
bx 8
b0 7
bx 6
bx 5
14
bx 3
bx 2
11
bx 0
1/
bx .
bx -
bx ,
b1 +
bx *
bx )
bx (
bx '
bx &
bx %
1$
0#
0"
bx !
$end
#1
b0 (
b0 -
b0 0
b0 <
b0 !
b0 %
b0 6
b0 8
b0 )
b0 3
b0 9
1"
#2
1;
0"
#3
1"
b0 '
b0 5
b0 :
b1 *
b1 2
b1 =
b1 &
b1 ,
b1 .
#4
0"
#5
1"
#6
0"
#7
1"
#8
0"
#9
1"
#10
0"
#11
1"
#12
0"
#13
b1 (
b1 -
b1 0
b1 <
b1 )
b1 3
b1 9
1"
0$
#14
0;
0"
#15
b10 )
b10 3
b10 9
b1 !
b1 %
b1 6
b1 8
b10 (
b10 -
b10 0
b10 <
1"
b1 '
b1 5
b1 :
b10 *
b10 2
b10 =
b10 &
b10 ,
b10 .
#16
0"
#17
b11 (
b11 -
b11 0
b11 <
b11 !
b11 %
b11 6
b11 8
b100 )
b100 3
b100 9
1"
b11 '
b11 5
b11 :
b100 *
b100 2
b100 =
b11 &
b11 ,
b11 .
#18
0"
#19
b1000 )
b1000 3
b1000 9
b111 !
b111 %
b111 6
b111 8
b100 (
b100 -
b100 0
b100 <
1"
b111 '
b111 5
b111 :
b1000 *
b1000 2
b1000 =
b100 &
b100 ,
b100 .
#20
0"
#21
b101 (
b101 -
b101 0
b101 <
b1111 !
b1111 %
b1111 6
b1111 8
b10000 )
b10000 3
b10000 9
1"
b1111 '
b1111 5
b1111 :
b10000 *
b10000 2
b10000 =
b101 &
b101 ,
b101 .
#22
0"
#23
b100000 )
b100000 3
b100000 9
b11111 !
b11111 %
b11111 6
b11111 8
b110 (
b110 -
b110 0
b110 <
1"
b11111 '
b11111 5
b11111 :
b100000 *
b100000 2
b100000 =
b110 &
b110 ,
b110 .
#24
0"
#25
b111 (
b111 -
b111 0
b111 <
b111111 !
b111111 %
b111111 6
b111111 8
b1000000 )
b1000000 3
b1000000 9
1"
b111111 '
b111111 5
b111111 :
b1000000 *
b1000000 2
b1000000 =
b111 &
b111 ,
b111 .
#26
0"
#27
b10000000 )
b10000000 3
b10000000 9
b1111111 !
b1111111 %
b1111111 6
b1111111 8
b1000 (
b1000 -
b1000 0
b1000 <
1"
b1111111 '
b1111111 5
b1111111 :
b10000000 *
b10000000 2
b10000000 =
b1000 &
b1000 ,
b1000 .
#28
0"
#29
b1001 (
b1001 -
b1001 0
b1001 <
b11111111 !
b11111111 %
b11111111 6
b11111111 8
b0 )
b0 3
b0 9
1"
b11111111 '
b11111111 5
b11111111 :
b0 *
b0 2
b0 =
b1001 &
b1001 ,
b1001 .
#30
0"
#31
b1010 (
b1010 -
b1010 0
b1010 <
1"
b1010 &
b1010 ,
b1010 .
#32
0"
#33
b1011 (
b1011 -
b1011 0
b1011 <
1"
b1011 &
b1011 ,
b1011 .
#34
0"
#35
b1100 (
b1100 -
b1100 0
b1100 <
1"
b1100 &
b1100 ,
b1100 .
#36
0"
#37
b1101 (
b1101 -
b1101 0
b1101 <
1"
b1101 &
b1101 ,
b1101 .
#38
0"
#39
b1110 (
b1110 -
b1110 0
b1110 <
1"
b1110 &
b1110 ,
b1110 .
#40
0"
#41
b1111 (
b1111 -
b1111 0
b1111 <
1"
b1111 &
b1111 ,
b1111 .
#42
0"
#43
b10000 (
b10000 -
b10000 0
b10000 <
1"
b10000 &
b10000 ,
b10000 .
#44
0"
#45
b10001 (
b10001 -
b10001 0
b10001 <
1"
b10001 &
b10001 ,
b10001 .
#46
0"
#47
b10010 (
b10010 -
b10010 0
b10010 <
1"
b10010 &
b10010 ,
b10010 .
#48
0"
#49
b10011 (
b10011 -
b10011 0
b10011 <
1"
b10011 &
b10011 ,
b10011 .
#50
0"
#51
b10100 (
b10100 -
b10100 0
b10100 <
1"
b10100 &
b10100 ,
b10100 .
#52
0"
#53
b10101 (
b10101 -
b10101 0
b10101 <
1"
b10101 &
b10101 ,
b10101 .
#54
0"
#55
b10110 (
b10110 -
b10110 0
b10110 <
1"
b10110 &
b10110 ,
b10110 .
#56
0"
#57
b10111 (
b10111 -
b10111 0
b10111 <
1"
b10111 &
b10111 ,
b10111 .
#58
0"
#59
b11000 (
b11000 -
b11000 0
b11000 <
1"
b11000 &
b11000 ,
b11000 .
#60
0"
#61
b11001 (
b11001 -
b11001 0
b11001 <
1"
b11001 &
b11001 ,
b11001 .
#62
0"
#63
b11010 (
b11010 -
b11010 0
b11010 <
1"
b11010 &
b11010 ,
b11010 .
1#
